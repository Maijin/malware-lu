import pefile, os, sys

def arc4(key, key_len, data):
    x = 0
    box = range(256)
    for i in range(256):
		x = (x + box[i] + ord(key[i % key_len])) % 256 
		box[i], box[x] = box[x], box[i]

    #print box
    x = y = 0
    out = []
    for char in data:
        x = (x + 1) % 256
        y = (y + box[x]) % 256
        box[x], box[y] = box[y], box[x]
        out.append(chr(ord(char) ^ box[(box[x] + box[y]) % 256]))
    
    return ''.join(out)  

def extract_resource(filename):
    pe =  pefile.PE(filename)
    print [entry.id for entry in pe.DIRECTORY_ENTRY_RESOURCE.entries]
    # Fetch the index of the resource directory entry containing the strings
    rt_idx = [
        entry.id for entry in 
        pe.DIRECTORY_ENTRY_RESOURCE.entries].index(pefile.RESOURCE_TYPE['RT_RCDATA'])

    # Get the directory entry
    rt_directory = pe.DIRECTORY_ENTRY_RESOURCE.entries[rt_idx]

    # For each of the entries (which will each contain a block of 16 strings)
    i = 0
    for entry in rt_directory.directory.entries:
        # Get the RVA of the string data and
        # size of the string data
        data_rva = entry.directory.entries[0].data.struct.OffsetToData
        size = entry.directory.entries[0].data.struct.Size
        print 'Directory entry at RVA', hex(data_rva), 'of size', hex(size)

        # Retrieve the actual data and start processing the strings
        data = pe.get_memory_mapped_image()[data_rva:data_rva+size]
        offset = 0
        if i == 2:
            return data
        i+=1

    return ''

def main():
    data = extract_resource(sys.argv[1])
    d = arc4("C\x00O\x00N\x00F\x00I\x00G", 6, data)
    print d

main()

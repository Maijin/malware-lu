#!/usr/bin/python
import re
import hashlib
import urllib, urllib2
from cookielib import CookieJar
import mimetools, mimetypes
import os, stat
import getopt, re, sys

username=""
password=""

url_auth = "http://malware.lu/_auth.php"
url_download = "http://malware.lu/_download.php"
url_upload = "http://malware.lu/_upload.php"
url_search = "http://malware.lu/_search.php"
url_logout = "http://malware.lu/_logout.php"


# python upload file stuff to make it all in one
class Callable:
    def __init__(self, anycallable):
        self.__call__ = anycallable

class MultipartPostHandler(urllib2.BaseHandler):
    handler_order = urllib2.HTTPHandler.handler_order - 10 # needs to run first

    def http_request(self, request):
        data = request.get_data()
        if data is not None and type(data) != str:
            v_files = []
            v_vars = []
            try:
                 for(key, value) in data.items():
                     if type(value) == file:
                         v_files.append((key, value))
                     else:
                         v_vars.append((key, value))
            except TypeError:
                systype, value, traceback = sys.exc_info()
                raise TypeError, "not a valid non-string sequence or mapping object", traceback

            if len(v_files) == 0:
                data = urllib.urlencode(v_vars, doseq)
            else:
                boundary, data = self.multipart_encode(v_vars, v_files)
                contenttype = 'multipart/form-data; boundary=%s' % boundary
                if(request.has_header('Content-Type')
                   and request.get_header('Content-Type').find('multipart/form-data') != 0):
                    print "Replacing %s with %s" % (request.get_header('content-type'), 'multipart/form-data')
                request.add_unredirected_header('Content-Type', contenttype)

            request.add_data(data)
        return request

    def multipart_encode(vars, files, boundary = None, buffer = None):
        if boundary is None:
            boundary = mimetools.choose_boundary()
        if buffer is None:
            buffer = ''
        for(key, value) in vars:
            buffer += '--%s\r\n' % boundary
            buffer += 'Content-Disposition: form-data; name="%s"' % key
            buffer += '\r\n\r\n' + value + '\r\n'
        for(key, fd) in files:
            file_size = os.fstat(fd.fileno())[stat.ST_SIZE]
            filename = fd.name.split('/')[-1]
            contenttype = mimetypes.guess_type(filename)[0] or 'application/octet-stream'
            buffer += '--%s\r\n' % boundary
            buffer += 'Content-Disposition: form-data; name="%s"; filename="%s"\r\n' % (key, filename)
            buffer += 'Content-Type: %s\r\n' % contenttype
            # buffer += 'Content-Length: %s\r\n' % file_size
            fd.seek(0)
            buffer += '\r\n' + fd.read() + '\r\n'
        buffer += '--%s--\r\n\r\n' % boundary
        return boundary, buffer
    multipart_encode = Callable(multipart_encode)

    https_request = http_request

class MalwareLuAuthError(Exception):
    def __str__(self):
        return "Wrong username or password"

class MalwareLuAlreadyHere(Exception):
    def __init__(self, md5):
        self.md5 = md5
    def __str__(self):
        return "Hash %s already in database" % self.md5

class MalwareLu():
    def __init__(self, login, password):
        self.cj = CookieJar()
        self.opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(self.cj))
        if self.login(username, password) == False:
            raise MalwareLuAuthError

    def __del__(self):
        self.logout()
        
    def filetohash(self, filename):
        file_content = open(filename, "rb").read()
        sha = hashlib.md5(file_content).hexdigest()
        return sha

    def get_content_type(self, filename):
        return mimetypes.guess_type(filename)[0] or 'application/octet-stream'

    def login(self,username, password):
        params = urllib.urlencode({'username': username, 'password': password})
        f = self.opener.open(url_auth, params)
        data = f.read()
        if not re.search("<input type=\"text\" name=\"md5\"/>", data):
            return False
        return True

    def logout(self):
        f = self.opener.open(url_logout)
        data = f.read()
     
    def download(self, md5):
        params = urllib.urlencode({'md5': md5})
        f =  self.opener.open(url_download + "?%s" % params)
        headers = f.info()
        if headers['content-type'] == "application/octet-stream":
            filename = re.findall("filename=(\S+)", headers['Content-Disposition'])[0]
            fp = open(filename, 'w')
            fp.write(f.read())
            fp.close()
            return True
        return False

    def check(self, md5):
        params = urllib.urlencode({'md5': md5})
        f = self.opener.open(url_search + "?%s" % params)
        data = f.read()
        if re.search("not found in the database", data):
            return False
        return True
        

    def upload(self, filename):
        if self.check(self.filetohash(filename)) == True:
            raise MalwareLuAlreadyHere(self.filetohash(filename))
        opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(self.cj), 
            MultipartPostHandler)
        params = {'file': open(filename, 'rb'), }
        f = opener.open(url_upload, params)
        return True

def usage():
    print "Malware.lu samples script"
    print "%s <md5>" % sys.argv[0]
    print "%s --upload <filename>" % sys.argv[0]
    print "%s --upload <filename> <filename> ..." % sys.argv[0]
    print "%s --check <md5>" % sys.argv[0]
    print "%s --download <md5>\n" % sys.argv[0]
    print "Default action is to download.\n"
    print " -u, --upload\t\tupload a file on malware.lu"
    print " -d, --download\t\tdownload a file from this hash from malware.lu"
    print " -c, --check\t\tcheck if a hash exist on malware.lu\n"
    print "Support multi files downloads/uploads/checks"
    print "%s --check 2bf9e787712b1d8762ed70f65ad9dc38 \\" % sys.argv[0]
    print "\t2bffeef17853c220cc4f76e2a600ced0"

def main():
    if len(username) == 0 or len(password) == 0:
        print "Please set username and password in the script"
        sys.exit(2)

    try:
        opts, args = getopt.getopt(sys.argv[1:], "hucd", 
            ["help", "upload", "check", "download"])
    except getopt.GetoptError, err:
        print str(err)
        usage()
        sys.exit(1)

    action = "download"
    for o, a in opts:
        if o in ( "-u", "--upload"):
            action = "upload"
        elif o in ("-", "--check"):
            action = "check"
        elif o in ("-d", "--download"):
            action = "download"
        elif o in ("-h", "--help"):
            usage()
            sys.exit(0)
        else:
            assert False, "unhandled option"

    if len(args) == 0:
        usage()
        sys.exit(1)
    try:        
        m = MalwareLu(username, password)
    except MalwareLuAuthError as e:
        print e
        sys.exit(2)

    for arg in args:
        if action == "download":
            print "Download of %s..." % arg
            if m.download(arg) == True :
                print "Download %s successfully" % arg
            else:
                print "Download %s failed not in db or quota reach" % arg

        elif action == "upload":
            print "Upload of %s..." % arg
            try:
                if m.upload(arg) == True :
                    print "Upload %s successfully" % arg
                else:
                    print "Upload %s failed"
            except MalwareLuAlreadyHere as e:
               print e

        elif action == "check":
            if m.check(arg) == True:
                print "%s is in database" % arg
            else:
                print "%s not in database" % arg

if __name__ == '__main__':
	main()

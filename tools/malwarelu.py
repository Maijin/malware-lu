#!/usr/bin/env python
# malwarelu.py
#                  _                          _       
#  _ __ ___   __ _| |_      ____ _ _ __ ___  | |_   _ 
# | '_ ` _ \ / _` | \ \ /\ / / _` | '__/ _ \ | | | | |
# | | | | | | (_| | |\ V  V / (_| | | |  __/_| | |_| |
# |_| |_| |_|\__,_|_| \_/\_/ \__,_|_|  \___(_)_|\__,_|
#
# Script to make request on the malware.lu API
#
# It use multipartposthandler class available on last ubuntu
#   $ sudo apt-get install python-multipartposthandler
# if you don't have it you can grab it with easy_install
#   $ sudo easy_install MultipartPostHandler
#   $ easy_install --user MultipartPostHandler
# last solution take it online and put it on the same
# folder as the script
#
# Warning no SSL certificat verification
# due to urllib2, so don't use it on hostile
# connection, if you patch the code to support this feature
# contact us
#
# any subjection, tips, improvement are welcome

import re
import hashlib
import urllib, urllib2, simplejson
import argparse, re, sys
import MultipartPostHandler

apikey = ""
version = "0.5"

class MalwareLuAlreadyHere(Exception):
    def __init__(self, md5):
        self.md5 = md5
    def __str__(self):
        return "Hash %s already in database" % self.md5

class MalwareLu():

    def __init__(self, apikey):
        base = "https://www.malware.lu/api/"

        self.apikey = apikey

        self.url_download = base + "download"
        self.url_upload = base + "upload"
        self.url_check = base + "check" 
        self.url_stats = base + "stats"

        
    def filetohash(self, filename):
        file_content = open(filename, "rb").read()
        md5 = hashlib.md5(file_content).hexdigest()
        return md5

    def get_content_type(self, filename):
        return mimetypes.guess_type(filename)[0] or 'application/octet-stream'
     
    def download(self, md5):
        param = { 'hash': md5,
                'apikey': self.apikey }
        data = urllib.urlencode(param)
        req =  urllib2.Request(self.url_download, data)
        f = urllib2.urlopen(req)

        headers = f.info()
        if headers['content-type'] == 'application/octet-stream':
            filename = re.findall('filename=(\S+)', 
                headers['Content-Disposition'])[0]
            fp = open(filename, 'w')
            fp.write(f.read())
            fp.close()
            return True
        return simplejson.loads(f.read())

    def check(self, md5):
        param = { 'hash': md5,
                'apikey': self.apikey }
        data = urllib.urlencode(param)
        f = urllib2.urlopen(self.url_check, data)
        data = f.read()
        return simplejson.loads(data)
    
    def stats(self):
        param = { 'apikey': self.apikey }
        data = urllib.urlencode(param)
        f = urllib2.urlopen(self.url_stats, data)
        data = f.read()
        return simplejson.loads(data)
        

    def upload(self, filename):
        if self.check(self.filetohash(filename))['status'] == True:
            raise MalwareLuAlreadyHere(self.filetohash(filename))
        opener = urllib2.build_opener(MultipartPostHandler.MultipartPostHandler)
        params = {'file': open(filename, 'rb'), 'apikey': self.apikey}
        f = opener.open(self.url_upload, params)
        data = f.read()
        return simplejson.loads(data)

def main():
    parser = argparse.ArgumentParser(description = "Malware.lu API tools")
    parser.add_argument('--version', action='version', 
        version="%(prog)s version " + version)
    parser.add_argument('-k', '--apikey', action="store", default=apikey)

    group = parser.add_mutually_exclusive_group(required=True)

    group.add_argument('-c', '--check', nargs="+", dest="check", metavar="hash",
        help="Check a hash on malware.lu")
    group.add_argument('-s', '--stats', dest="action", 
        action='store_const', const="stats",
        help="Show your stats on malware.lu")
    group.add_argument('-u', '--upload', nargs="+", dest="upload", metavar="file",
        help="Upload a file to malware.lu")
    group.add_argument('-d', '--download', nargs="+", dest="download", metavar="hash",
        help="Download a hash from malware.lu")
    
    r = parser.parse_args()
    
    m = MalwareLu(r.apikey)
    try:
        # Upload files loop
        if r.upload != None:
            for arg in r.upload:
                print("Upload of %s..." % arg)
                try:
                    ret = m.upload(arg)
                    if ret['status'] == True :
                        print "Upload %s successfully" % arg
                    else:
                        print ret['error'] 
                except MalwareLuAlreadyHere as e:
                   print e


        # Download files loop
        if r.download != None:
            for arg in r.download:
                print "Download of %s..." % arg
                ret = m.download(arg)
                if ret == True :
                    print "Download %s successfully" % arg
                else:
                    print ret['error']
        
        # Check files loop
        if r.check != None:
            for arg in r.check:
                ret = m.check(arg)
                if ret['status'] == True:
                    print "%s is in database" % arg
                else:
                    print "%s not in database" % arg

        # stats action
        if r.action == "stats":
            ret = m.stats()
            print "Downloads stats %s" % ret['stats']

    except urllib2.HTTPError, e:
        if e.code == 401:
            print "Wrong api key"
        else:
            print e

if __name__ == '__main__':
	main()

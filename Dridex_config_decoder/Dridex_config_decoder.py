#!/usr/bin/env python
# Dridex_config_decoder.py
#                  _                          _
#  _ __ ___   __ _| |_      ____ _ _ __ ___  | |_   _
# | '_ ` _ \ / _` | \ \ /\ / / _` | '__/ _ \ | | | | |
# | | | | | | (_| | |\ V  V / (_| | | |  __/_| | |_| |
# |_| |_| |_|\__,_|_| \_/\_/ \__,_|_|  \___(_)_|\__,_|

import sys
import tempfile

import pefile
from aplib import decompress


LEN_XOR_KEY = 4  # Dridex has a XOR key of 4 bytes.


def extract_sdata(pe_file):
    pe = pefile.PE(pe_file)
    for section in pe.sections:
        if '.sdata' in section.Name:
            return bytearray(section.get_data(section.VirtualAddress, section.SizeOfRawData))
    return None


def xor_decode(buffer, xor_key='', len_key=LEN_XOR_KEY):
    return bytearray(buffer[i] ^ int(xor_key[i % len_key], 16) for i in range(len(buffer)))


def decompress_that_shit(buffer, output='config.txt'):
    # AWFUL hack because of aplib bug with `str` and offset... forced to use `file` instead.
    temp_file = tempfile.TemporaryFile(mode='w+b')
    # Skip 12 first bytes (4 bytes for XOR key, 4 for compressed size and 4 for uncompressed size)
    temp_file.write(buffer[12:])
    temp_file.seek(0)
    cleartext = decompress(temp_file).do()
    temp_file.close()
    print('[I] Decoded configuration:\n\t %s' % str(cleartext))
    with open(output, 'wb') as f:
        print("[I] Saving decoded configuration into '%s'" % output)
        f.write(str(cleartext))


if __name__ == '__main__':
    if len(sys.argv) < 2:
        print('Usage: %s <dridex_dump> [<output>]')
        sys.exit(-1)
    print("[I] Extracting '.sdata' section.")
    resource = extract_sdata(sys.argv[1])
    if not resource:
        print("[E] Error: '.sdata' not found.")
        sys.exit(-2)
    xor_key = [hex(x) for x in resource[:LEN_XOR_KEY]]
    print("[I] XOR key: '%s'" % str(xor_key))
    resource = xor_decode(resource, xor_key=xor_key)
    if len(sys.argv) > 2:
        decompress_that_shit(resource, output=sys.argv[2])
    else:
        decompress_that_shit(resource)
